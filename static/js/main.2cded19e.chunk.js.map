{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,yBACtB,6BAAKL,EAAMI,QAAQE,OACnB,kCAAKN,EAAMI,QAAQG,aCJlBC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLjBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqCrEG,G,wDApCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZtC,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IALJ,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WAAS,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YAEZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACnG,OACE,sBAAK9B,UAAU,MAAf,UAEA,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2cded19e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=2&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p> {props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props)  =>{\r\n    return (\r\n        <div className='card-list'>\r\n           {props.monsters.map(monster => (\r\n           <Card key={monster.id} monster={monster} />))\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return (\r\n        <input className='search' type='search' placeholder={placeholder} onChange={handleChange}/>\r\n    )\r\n}\r\n","import React ,{ Component } from 'react';\nimport {CardList} from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nimport './App.css'\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state= {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters= monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n      \n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\n      <CardList monsters={filteredMonsters}/> \n        \n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}